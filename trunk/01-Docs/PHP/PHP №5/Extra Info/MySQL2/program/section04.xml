<?xml version="1.0" encoding="windows-1251" ?>

<!DOCTYPE page [
<!ENTITY nbsp "&#160;">
<!ENTITY пробел "&#160;">
<!ENTITY shy "&#173;">
<!ENTITY перенос "&#173;">
]>

<?xml:stylesheet type="text/xsl" href="../common/layout.xsl" ?>

<Урок xmlns="x-schema:Schema.xml" название="MySQL"  предыдущий="section03.xml" следующий="section05.xml">
<H2>Резервирование и копирование баз данных. Общие понятия.</H2>
<P>Администратор должен обязательно резервировать базы данных на случай повреждения 
или потери данных. Только благодаря резервированию все таблицы могут быть 
восстановлены в прежнее состояние в случае сбоя в работе системы. Кроме того, 
не исключен вариант, когда резервирование может оказаться единственным путем 
отступления, если какой-либо неопытный пользователь случайно выполнит операторы 
DROP DATABASE или DROP TABLE(Мы уже говорили о правах пользователей и дуракозащищенности 
баз данных). Иногда сбой может произойти по вине собственно администратора 
MySQL (все мы люди).&nbsp;</P>
<P>Существует два основных способа резервирования баз данных: 
использование программы mysqldump и непосредственное копирование файлов базы 
данных&nbsp;. Каждый метод имеет свои преимущества и недостатки.</P>
<UL>
  <LI>Программа mysqldump тесно взаимодействует с 
  сервером MySQL. Методы непосредственного копирования являются внешними по 
  отношению к серверу и требуют проверки, чтобы клиенты не пытались изменить 
  таблицы баз данных в процессе копирования. Эта же проблема имеет место при 
  использовании для резервирования баз данных средств резервирования файловой 
  системы. Если в процессе резервирования кто-то из пользователей изменяет 
  таблицы, их файлы окажутся несовместимыми и не подлежащими восстановлению. 
  Разница между резервированием файловой системы и непосредственным копированием 
  файлов заключается в том, что в первом случае имеется возможность управлять 
  расписанием резервирования. </LI>
  <LI>Программа mysqldump медленней резервирует данные, чем 
  методы непосредственного копирования.&nbsp; </LI>
  <LI>Программа mysqldump создает простые текстовые 
  файлы, которые можно легко переносить на другие компьютеры, даже с другой 
  аппаратной архитектурой. Копируемые вручную файлы не могут переноситься на 
  другие компьютеры, если, конечно, не используется специальный формат хранения 
  MylSAM. ISAM-таблицы могут копироваться только между компьютерами с подобной 
  архитектурой. Так, например, копирование файлов из системы Solaris на 
  компьютере с процессором SPARC в систему Solaris на компьютер с процессором 
  SPARC будет успешным, чего нельзя сказать о копировании файлов из системы 
  Solaris на компьютере с процессором SPARC в систему Solaris на компьютер с 
  процессором Intel. Впервые появившийся в версии MySQL 3.23 формат хранения 
  MylSAM решает эту проблему, поскольку является независимым от архитектуры 
  компьютера. Соответственно, скопированные файлы можно легко переносить на 
  другой компьютер с любой архитектурой в одном из двух случаев: на втором 
  компьютере также запущена СУБД MySQL версии 3.23 и более поздней либо файлы 
  таблиц представлены в формате MylSAM, а не JSAM. </LI>

  <h4>Независимо от выбранного метода резервирования 
  существуют определенные принципы, которым необходимо следовать для достижения 
  эффективных результатов.</h4> 
  <LI>Регулярно выполняйте резервирование. На этапе 
  планирования разработайте расписание и четко его придерживайтесь.</LI>
  <LI>   
  Обязательно активизируйте регистрацию обновлений (как это сделать, 
  рассказывается в разделе "Ведение файлов журналов", в этом 
  уроке). Журналы обновлений помогут восстановить базу данных после сбоя, вернее, после 
  восстановления заархивированных файлов вернуть ее в состояние, в котором база данных 
  находилась непосредственно перед сбоем. Для этого необходимо 
  заново внести все изменения, сделанные с момента 
  последнего резервирования, просто запустив запросы журнала обновлений.</LI>
  <LI> Используйте постоянную и&nbsp; понятную схему присвоения имен файлам 
  архива. Имена типа backup1, backup2 и т.д. не несут никакой смысловой 
  нагрузки. И когда приходит время восстанавливать информацию, много времени 
  тратится на изучение их содержимого. Гораздо эффективней присваивать архивным 
  файлам имена баз данных и дат резервирования. Например: 
  <pre>c:\mysql\bin&gt; mysqldump samp_db &gt; /usr/archives/mysql/samp_db.2002-10-02 
c:\mysql\bin&gt; mysqldurap menagerie &gt; /usr/archives/mysql/menagerie.2002-10-02</pre></LI>
  <LI>Иногда 
  сразу после создания файлы архивов лучше сжать, ведь они занимают много места. 
  Время от времени рекомендуется также удалять ненужные файлы архивов, так же 
  как и файлы журналов, чтобы не заполнять жесткий диск ненужной информацией. </LI>
  <LI>Резервируйте впоследствии архивные файлы MySQL с помощью средств 
  резервирования файловой системы. В случае фатального сбоя операционной системы 
  потерянным может оказаться не только каталог данных, но и вся остальная 
  информация, находящаяся на жестком диске. Поэтому для большей надежности 
  необходимо резервировать также файлы архивов и журналов обновлений, например 
  на CD-R&nbsp;диск.</LI>
  <LI>Размещайте файлы архивов на отдельном диске. Это снизит вероятность 
  переполнения этими файлами диска, содержащего каталог данных. Описанные выше 
  методы резервирования баз данных оказываются эффективными и для копирования 
  этих баз на другой сервер. Наиболее часто база данных переносится на другой 
  сервер, работающий на отдельном компьютере, однако можно перенести ее в 
  отдельный каталог для другого сервера, работающего на этом же локальном 
  компьютере. Необходимость в этом может возникнуть после выхода новой версии 
  MySQL, когда администратор захочет протестировать ее работу перед полным 
  переходом, либо при установке нового более производительного компьютера, на 
  который со временем планируется перенести все базы данных. 
</LI></UL>
</Урок>
