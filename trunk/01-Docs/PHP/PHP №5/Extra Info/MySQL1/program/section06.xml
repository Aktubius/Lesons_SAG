<?xml version="1.0" encoding="windows-1251" ?>

<!DOCTYPE page [
<!ENTITY nbsp "&#160;">
<!ENTITY пробел "&#160;">
<!ENTITY shy "&#173;">
<!ENTITY перенос "&#173;">
]>

<?xml:stylesheet type="text/xsl" href="../common/layout.xsl" ?>

<Урок xmlns="x-schema:Schema.xml" название="Список изображений и 'веселые' картинки"  предыдущий="section05.xml" следующий="section07.xml">

<h2><font color="#800000">Список изображений и "веселые" картинки</font></h2>

<p>
Как писалось в старых добрых книгах "Внимательный читатель мог бы заметить, что..." при описании методов расширеного комбинированого списка мы умпоминали о списке изображений. В MFC он представлен классом CImageList. 
</p>

<center><img src="cbe5.png" width="183" height="55"></img></center>

<p>
У даного класса существует много методов, но мы рассмотрим здесь только те, которые нам будут необходимы для написания примера. Список изображений выступает контейнером для изображений, тоесть является хранилищем изображений. Естественно, для работы со списком изображений нам необходимо будет создать экземпляр класса CImageList. Далее, чтобы проинициализировать список изображенпий и связать его с экземпляром класса CImageList воспользуемся методом Create. Учитывая тот факт, что существует пять вариантов даного метода, а в примере мы используем только один, то рассмотрим следующий вариант:
</p>

<p>
   <b>BOOL Create( int cx, int cy, UINT nFlags, int nInitial, int nGrow );</b> 
</p>

<p>
Прототип метода понятен, а как же насчет параметов? Рассмотрим и этот вопрос. Первые два параметра задают размер каждого изображения по ширине и высоте. Третий параметр определяет тип создаваемого списка изображений, к примеру, ILC_COLOR4 - указывает, что будет использоваться 4-битная (16 цветов) палитра для BMP файлов. Четвертый параметр содержит информацию о количестве элементов которые будут располагаться в списке, а пятый на сколько элементов, в дальнейшем, будет увеличиваться список.
</p>

<p>
Метод <b>int Add( CBitmap* pbmImage, COLORREF crMask );</b> позволяет добавить к списку изображений картинку pbmImage и указать маску для изображений crMask. Отметим, что это только один из вариантов данного  метода.
</p>

<p>
Теперь, в заключении, пару слов о классе CBitmap. Данный класс инкапсулирует в себе битовую карту (bmp картинку - растровое изображение) графического интерфейса Windows (GDI) и предоставляет методы для управления  нею. Битовая картинка - это массив битов, в котором каждой точке дисплея соответсвует один или несколько битов. Растровые изображения возможно использовать для хранения каринок, создания кистей и т.д. Мы еще поговроим детальней об этом классе на одном из следующих занятий.
</p>

<center><img src="cbe6.png" width="191" height="79"></img></center>

<p>
В данном классе определен метод: <b>BOOL LoadBitmap( UINT nIDResource );</b> который загружает битовую карту из ресурсов, определяемую идентификатором nIDResource. Загруженная карта связывается с экземпляром класса CBitmap. Если указаный идентификатор не связан с битовой картой или, к примеру, не хватило памяти для загрузки битовой карты, другими словами возникли проблемы при работе функции - возвращаемое значение равно нулю. У родителя класса CBitmap - CGdiObject есть метод BOOL CGdiObject::DeleteObject( ); - который освобождает память, занимаемую картинкой и возвращает НЕ ноль, если отработал нормально.
</p>

<p>
Вот, в принципе, тот минимальной объем знаний, который нам необходим для создания приложения использующего расширенный комбинированный список. Перейдем к практике...
</p>

</Урок>