<?xml version="1.0" encoding="windows-1251" ?>

<!DOCTYPE page [
<!ENTITY nbsp "&#160;">
<!ENTITY пробел "&#160;">
<!ENTITY shy "&#173;">
<!ENTITY перенос "&#173;">
]>

<?xml:stylesheet type="text/xsl" href="../common/layout.xsl" ?>

<Урок xmlns="x-schema:Schema.xml" название="MySQL"  предыдущий="section02.xml" следующий="section04.xml">
<H1 align="center">Управление пользовательскими учетными записями</H1>
<P>В обязанности администратора MySQL входит также создание и настройка 
учетных записей пользователей MySQL. В процессе этой настройки необходимо 
определить, какие пользователи будут иметь возможность подключения к серверу, 
откуда они смогут подключиться и что смогут делать после подключения. </P>
<P>Два появившихся в MySQL 3.22.11 оператора упрощают эту задачу. Оператор GRANT 
создает пользователей MySQL и позволяет настроить их привилегии. Оператор REVOKE 
удаляет привилегии. Эти два оператора являются, своего рода, внешним интерфейсом 
для таблиц разрешений базы данных mysql и обеспечивают альтернативу 
непосредственному редактированию содержимого этих таблиц. Операторы GRANT и 
REVOKE работают с четырьмя следующими таблицами. </P>
<table border="1"><tr><td>Таблица разрешений</td><td> Содержимое</td></tr>
<tr><td>user</td><td>Подключающиеся к серверу пользователи и все 
их глобальные привилегии </td></tr>
<tr><td>db</td><td>Привилегии уровня базы данных</td></tr>
<tr><td>tables_priv</td><td>Привилегии уровня таблицы</td></tr>
<tr><td> columns_priv</td><td>Привилегии уровня столбца </td></tr>
</table>
<P>Существует еще одна, пятая таблица разрешений (host), однако 
операторы GRANT и REVOKE не&nbsp;в состоянии&nbsp;ее обрабатывать. </P>
<P>Если оператор GRANT запускается для определенного пользователя, в таблице user 
для него создается новая запись. Если оператор определяет для пользователя какие-либо 
глобальные привилегии (привилегии администратора или привилегии, применяемые 
сразу ко всем базам данных), они также записываются в таблицу user. Права 
обработки базы данных, таблицы или столбца записываются соответственно в таблицы 
db, tables_priv и column_priv. </P>
<P>         
  Применять операторы GRANT и REVOKE проще, чем непосредственно редактировать 
таблицы разрешений. Однако&nbsp; роль этих таблиц действительно велика, и администратор 
должен понимать, каким образом их обрабатывают операторы GRANT и REVOKE. 
Далее в этом разделе рассказывается, как создавать учетные записи пользователей MySQL, 
присваивать или удалять их привилегии, а также полностью удалять пользователей 
из таблиц разрешений. </P>
<H3>Создание новых пользователей и предоставление привилегий. </H3>
<P>Оператор GRANT имеет следуюший синтаксис: </P>
<PRE>GRANT privileges (columns) 
        ON what 
        ТО user 
        IDENTIFIED BY "password" 
        WITH GRANT OPTTON 
</PRE>
<p>Для успешного его выполнения обязательно нужно правильно определить следующую 
информацию:</p>
<ul> 
<li> <em>privileges (привилегии).</em> Привилегии присваиваются определенному 
пользователю.<br /> Используемые в операторе 
  GRANT спецификаторы привилегий описаны в представленной ниже таблице. <br />
  <table  border ="1" style="align:center; width:90%">
  <tr><td>Спецификатор привилегий</td><td>Разрешенная операция</td></tr> 
  <tr><td>ALTER </td><td>Изменение таблиц и  индексов </td></tr>
  <tr><td>CREATE </td><td>Создание баз данных и таблиц </td></tr>
  <tr><td>DELETE </td><td>Удаление существующих записей из таблиц </td></tr>
  <tr><td>DROP </td><td>Удаление баз данных и таблиц </td></tr>
  <tr><td>INDEX </td><td>  Создание и удаление индексов </td></tr>
  <tr><td>INSERT</td><td>Вставка новых записей в таблицы&nbsp; </td></tr>
  <tr><td>REFERENCES </td><td>  Не используется </td></tr>
  <tr><td>SELECT</td><td>  Извлечение существующих записей</td></tr> 
  <tr><td>UPDATE </td><td> Изменение существующих записей&nbsp; </td></tr>
  <tr><td>FILE </td><td>Чтение и запись файлов сервера </td></tr>
  <tr><td>PROCESS</td><td>Просмотр информации о внутренних потоках сервера и их удаление</td></tr>
  <tr><td>RELOAD</td><td>Перезагрузка таблиц paзрешений или обновление журналов,
  кэша компьютера или кэша таблицы</td></tr>
  <tr><td>SHUTDOWN </td><td>Завершение работы сервера</td></tr>
  <tr><td>ALL</td><td>Все операции.Аналог— ALL  PRIVILEGES</td></tr>
<tr><td>USAGE</td><td>Полное отсутствие привилегий</td></tr>
</table><br />Спецификаторы 
  привилегий, входящие в первую группу этой таблицы, применяются к базам данных, 
  таблицам и столбцам. Спецификаторы второй группы определяют административные 
  привилегии. Как правило, они используются довольно редко, поскольку позволяют 
  пользователю влиять на работу сервера. (Не каждому пользователю, например, 
  необходима привилегия SHUTDOWN.) В третью группу входят два отдельных 
  спецификатора: спецификатор ALL предоставляет "все привилегии", а USAGE 
  означает "полное отсутствие привилегий". В последнем случае создается новый 
  пользователь, не обладающий никакими правами.<br />
  <li><em>columns (столбцы).</em> </li>   
  Столбцы, к которым применяются определенные привилегии. Этот параметр 
  необязателен и используется только при установке привилегий для столбцов. 
  Имена нескольких столбцов отделяются друг от друга запятыми. </li>         
   <li><em>what (что). </em>Уровень 
  применения привилегий. Привилегии могут быть глобальными (применяемыми ко всем 
  базам данных и их таблицам), уровня баз данных (применяемыми ко всем таблицам 
  определенной базы данных) или уровня таблицы. Используя оператор 
  <EM>columns</EM>, можно определить также привилегии уровня столбца. </li>   
  
<li><em>user (пользователь).</em> 
  Пользователь, которому присваиваются привилегии. В некоторых версиях MySQL 
  необходимо указывать как имя пользователя, так икомпьютер, с которого он 
  сможет подключаться. Такой способ задания легко позволяет определить двух 
  пользователей с одинаковым именем, но подключающихся с разных компьютеров. 
  Возможности MySQL позволяют их различать и наделять различными правами. 
  <br />&nbsp;&nbsp;&nbsp; Имя пользователя в некоторых версиях 
  MySQL представляет собой имя, используемое при подключении к серверу. Оно 
  вовсе необязательно должно быть связано с именем регистрации в ОС UNIX или 
  Windows. Если имя пользователя MySQL не определено явным образом, клиентские 
  программы по умолчанию используют его в качестве регистрационного имени, 
  однако это необязательно. Не существует также каких-либо особых требований, 
  чтобы суперпользователь MySQL, обладающий максимальными правами, имел имя 
  root. По желанию его можно изменить в таблицах разрешений на nobody, если для 
  выполнения определенных операций требуются его полномочия. </li>   
  <LI>&nbsp;<EM>password (пароль).</EM> Присвоенный пользователю пароль, который 
  не является обязательным. Если для нового пользователя опустить выражение 
  lDENTIFIED BY, пароль ему присвоен не будет (что не совсем разумно с точки 
  зрения безопасности). Если же этот оператор задается для уже существующего 
  пользователя, введенный пароль заменит используемый до настоящего момента. 
  Старый пароль останется неизменным, если новый не будет определен. Строка 
  пароля, задаваемая с помощью выражения IDENTIFIED BY, должна представлять 
  собой буквенную строку, которую при записи зашифрует оператор GRANT. Поэтому 
  не следует использовать функцию PASSWORD (), применяемую с оператором SET 
  PASSWORD. Оператор WITH GRANT OPTlON является необязательным. С его по-мошью 
  можно предоставить пользователю все привилегии, определенные оператором&nbsp; 
  GRANT для других пользователей. Этот оператор можно применять для 
  делегирования возможностей определенных категорий другим пользователям. В 
  именах пользователей, баз данных, таблиц и паролях, записываемых в таблицу 
  разрешений, строчные буквы отличаются от заглавных. Регистр в именах 
  компьютеров и столбцов таблиц не учитывается. </LI>          
         </ul>
<P>Чтобы определиться, какую же форму оператора GRANT применить, достаточно 
ответить на следующие вопросы:
<ul type="circle"> 
<li> Кто и откуда может подключаться к серверу? 
  </li>
<li>Какой уровень привилегий должен иметь пользователь и 
  на доступ к чему эти привилегии предоставляются? 
  </li>
<li> Необходимо ли пользователю предоставлять 
административные привилегии? </li>
</ul>Давайте попробуем ответить на эти вопросы 
и рассмотрим примеры оператора GRANT для создания учетных записей пользователей 
MySQL. </P>
<H3>Кто и откуда может подключаться к серверу </H3>
<p>        
Администратор может разрешить пользователю подключаться как с определенного компьютера, так и с различных 
компьютеров. В первом случае, если точно известно, что пользователи 
будут подключаться только со своих компьютеров, можно предоставить им 
такой доступ с помощью следующих операторов: </p>
<PRE>GRANT ALL ON samp_db.* ТО boris@localhost IDENTIFIED BY "ruby" 
GRANT ALL ON samp_db.* ТО fred@ares.mars.net IDENTIFIED BY "quartz" 
GRANT ALL ON samp_db.* ТО mах@% IDENTIFIED BY "diamond"</PRE> 
<p>Символ "%" заменяет все возможные значения адресов и 
выполняет те же функции, что и при сравнении с помощью оператора LIKE. В 
предыдущем примере его можно условно заменить фразой "любой компьютер". 
Установка символа "%" аналогична простому опусканию части, задающей компьютер. 
Другими словами, эквивалентными в данном примере выступят записи raax и max0%. 
Это самый простой и, в то же время, самый незащищенный способ создать 
пользователя. В случае необходимости можно также разрешить пользователю 
подключаться с ограниченного числа компьютеров. Так, чтобы пользователь mary мог 
подключаться с компьютеров домена snake.net, достаточно воспользоваться 
спецификатором %. snake. net:
<pre> GRANT ALL ON samp_db.* TO &gt;mary@%.snake.net IDENTIFIED BY "topaz"</pre> 
Для определения компьютера можно применять не только 
имена, но и 1Р-адреса. Эти адреса можно задавать явно, либо с помощью 
вспомогательных символов. Кроме того, в версии MySQL 3.23 появилась возможность 
определять 1Р-адреса, задавая маску сети, устанавливая число разрядов в сетевом 
номере:
<pre>GRANT ALL ON samp_db.* ТО joe@l92.168.128.3 IDENTIFIED BY "water" 
GRANT ALL ON samp_db.* ТО ardis@i92.168.128.% IDENTIFIED ВУ "snow" 
GRANT ALL ON samp_db.* ТО rex@l92.168.128.0/17 IDENTIFIED BY "ice" 
</pre>Первый оператор определяет только один компьютер, с которого может 
подключиться пользователь joe. Второй определяет набор 1Р-адресов для подсети 
класса С 192.168.128. В третьем операторе часть 192.168.128.0/17 определяет 
17-разрядный сетевой номер и соответствует любому компьютеру с адресом 
192.168.128 в первых 17 разрядах 1Р-адреса. Если MySQL отказывается принимать 
определенные пользовательские значения, попробуйте заключить их в кавычки 
(необходимо отдельно заключать в кавычки имя пользователя и компьютера): 
<pre>GRANT ALL ON samp_db.president ТО "my friend"0"boa.snake.net" </pre></p>
<H3>Какой уровень привилегий должен иметь пользователь и на доступ к чему эти 
привилегии предоставляются </H3>
<P>Администратор может предоставлять пользователям привилегии разных уровней. 
Наиболее мощными являются глобальные привилегии, применяемые ко всем базам 
данных. Так, например, чтобы предоставить пользователю ethel права 
суперпользователя, который может делать все, в том числе и предоставлять 
привилегии другим пользователям, необходимо запустить следующий оператор: 
<pre>GRANT ALL ON *.* ТО ethel@localhost IDENTIFIED BY "coffee" WITH GRANT OPTION </pre>Спецификатор 
*.* в предложении ON можно условно заменить фразой "все базы данных 
и все таблицы". Для повышения безопасности подключаться пользователю ethel 
разрешено только с одного локального компьютера. Ограничение компьютеров, с 
которых может подключаться к серверу обладающий широкими правами пользователь, — 
весьма мудрое решение, В этом случае ограничивается и число компьютеров, с которых 
могут быть предприняты попытки взлома пароля. Некоторые привилегии (FILE, 
PROCESS, RELOAD и SHUTDOWN) являются административными и могут присваиваться 
только с помощью спецификатора глобальных привилегий ON *.* . В 
случае необходимости их можно присваивать без предоставления привилегий на 
уровне базы данных. Так, например, приведенный ниже оператор создает 
пользователя flush, который обладает возможностью только выполнять операторы 
FLUSH. Это может оказаться полезным в административных сценариях, когда 
необходимо выполнить обновление журналов:
<pre> GRANT RELOAD ON *.* ТО flush@localhost IDENTIFIED BY "flushpass" </pre>В 
общем, как уже отмечалось ранее, административные привилегии 
присваиваются довольно редко, поскольку наделенные ими пользователи могут 
влиять на работу сервера. Привилегии уровня базы данных применяются ко всем 
таблицам определенной базы. Такие привилегии присваиваются с помощью предложения 
ON db_name 
<pre>GRANT ALL ON samp_db.* ТО bill@racer.snake.net IDENTIFIED BY "rock"
GRANT SELECT ОN menagerie.* ТО ro_user@% IDENTIFIED BY "dirt" </pre>Первый из 
указанных операторов предоставляет пользователю bill все права для работы со 
всеми таблицами базы данных samp_db. Второй оператор создает пользователя 
ro_user с ограниченными правами (только чтение), который может получать доступ к 
любой таблице базы данных menagerie, однако только лля чтения. Другими словами, 
этот пользователь имеет возможность запускать только оператор SELECT. </P>
<P>При задании оператора GRANT можно задавать сразу 
несколько привилегий одновременно. Так, например, если необходимо предоставить 
пользователю возможность считывать и изменять содержимое существующих таблиц, но 
запретить создавать новые таблицы или удалять уже сушествующие, это можно 
сделать следующим образом:
<pre> GRANT SELECT, INSERT, DELETE, UPDATE ON samp_db.* ТО jennie@% IDENTIFIED BY "borno" </pre>
   Для еще более 
детального управления доступом можно предоставлять привилегии отдельным таблицам или 
даже отдельным их столбцам. Привилегии столбцам оказываются особенно 
полезными, если определенную часть таблицы необходимо скрыть от пользователя, 
либо предоставить возможность изменения только заданных столбцов. Предположим, например, 
что какая-то фирма нанимает на определенный период времени сотрудника, который 
будет выполнять роль секретаря. Администратор решает предоставить новому 
сотруднику права доступа только для чтения таблицы member, содержащей информацию 
о действующих членах общества, и привилегию UPDATE столбцу expiration (срок 
окончания членства) этой таблицы. При таком доступе новый секретарь вполне сможет 
изменять даты окончания членства организаций-участников, если они&nbsp;продолжают свое членство. 
Для создания такого пользователя MySQL&nbsp; можно использовать следующие операторы: 
<pre>GRANT SELECT ON sarop_db.member ТО assistant@localhost IDENTIFIED BY "officehelp" 
GRANT UPDATE (expiration) ON samp_db.member ТО assistant@localhost </pre>Первый 
оператор предоставляет права на чтение всей таблицы&nbsp; mcmber и определяет 
пароль. Второй оператор добавляет привилегию&nbsp; UPDATE, но только для столбца 
expiration. Поскольку пароль устанавливается первым оператором, во втором его 
определять повторно вовсе необязательно. Если необходимо присвоить привилегии 
для работы с несколькими столбцами, их имена следует разделить запятыми. Так, 
например, чтобы добавить привилегии UPDATE для полей адресов таблицы member для 
пользователя assistant, используется приведенный ниже оператор. При&nbsp;его 
выполнении новые привилегии будут добавлены к уже существующим привилегиям 
пользователя:
<pre>GRANT UPDATE (street,city,state,zip) ON samp_db.member ТО assistant@localhost</pre>
  
 Как правило, пользователю не предоставляются большие привилегии,&nbsp; чем это нужно для 
работы. Иногда, тем не менее, возникает необходимость в предоставлении 
пользователям возможности создавать таблицы,&nbsp;чтобы заносить в них промежуточные результаты. Желательно, чтобы эти&nbsp;таблицы 
создавались не в рабочей базе данных, поскольку пользователи могут случайно 
изменить ее содержимое. Эту задачу можно решить посредством создания отдельной 
базы данных (назовем ее tmp) и предоставлению пользователям всех возможных 
привилегий для работы с ней.  </P>   
<P>Чтобы разрешить всем пользователям домена mars . net 
использовать ба-зуданных tmp, достаточно ввести следующий оператор GRANT:
<pre>GRANT ALL ON tmp.* ТО ""@%.mars.net</pre>После его 
выполнения пользователи смогут создавать и ссылаться на таблицы базы данных tmp 
с помощью имен типа tmp.tbl_name. (Часть "" в спецификаторе создает запись для 
анонимного пользователя, что позволяет каждому использовать эти привилегии.) </P>

<H3>Отмена привилегий и удаление пользователей </H3>
<p>Для отмены привилегий пользователя применяется оператор REVOKE. Его синтаксис 
очень похож на синтаксис оператора GRANT с той лишь разницей, что 
предложение&nbsp;TO заменено на предложение FROM, а предложения lDENTlFlED BY и 
WITH GRANT OPTION отсутствуют вовсе: 
<pre>REVOKE privileges (columns} ON what FROM user </pre></p>
<P>Часть user этого оператора должна соответствовать части user исходного 
оператора GRANT для пользователя, привилегии которого отменяются. Часть 
privileges необязательно должна соответствовать ранее определенным привилегиям. 
Пользуясь оператором REVOKE, можно отменить только некоторые из привилегий, 
предоставленные оператором GRANT. Оператор REVOKE применяется для отмены 
привилегий, но не для удаления пользователей. В таблице user все равно остается 
запись для пользователя, даже если все привилегии для него сняты. Это означает, 
что пользователь все еще имеет возможность подключаться к серверу.</P>
<P>Для полного удаления пользователя необходимо явным образом удалить его 
запись из таблицы user. Для этих целей применяется оператор DELETE:
<pre>DELETE FROM user WHERE User = "user_name" and Host = "host_name"
FLUSH PRIVILEGES</pre> Оператор DELETE удаляет запись 
пользователя, а оператор FLUSH указывает серверу перезагрузить таблицы 
разрешений. (Таблицы перезагружаются автоматически при использовании операторов 
GRANT и REVOKE. Однако этого не происходит при непосредственном изменении таблиц 
разрешений.) </P>
<p>А теперь у меня для вас радостная весть. Если вы таки да пользуетесь MySQL Front-ом,
то для настройки привилегий пользователя у вас есть изумительное средство - User-Menager.
<img src="./img/UserManager.jpg" alt="User-Menager" />Найти его можно здесь.
Первая закладка предназначена для добавления пользователя, вторая для редактирования существующих.
Вы сможете добавлять или удалять привилегии, устанавливая или снимая галочки в чекбоксах. 
Лишить пользователя всех привелегий или удалить его вообще можно при помощи кнопки Revoke Privileges. При этом изменения вносятся в таблицы разрешений, как вы можете убедиться, просмотрев текст запроса, сгенерированного приложением. Напомню, что удалять пользователя из таблицы user обязательно, т.к. даже если у него не останется никаких прав, подключаться к серверу MySQL
он все еще сможет.
</p>

</Урок>
