<?xml version="1.0" encoding="windows-1251" ?>

<!DOCTYPE page [
<!ENTITY nbsp "&#160;">
<!ENTITY пробел "&#160;">
<!ENTITY shy "&#173;">
<!ENTITY перенос "&#173;">
]>

<?xml:stylesheet type="text/xsl" href="../common/layout.xsl" ?>

<Урок xmlns="x-schema:Schema.xml" название="Анализ функций РНР для работы с MySQL" 
предыдущий="section05.xml" следующий="section07.xml">

<h1 style="color:maroon">Анализ функций РНР для работы с MySQL</h1>

<h3>Открытие и закрытие соединения с сервером баз данных</h3>

	<p><b>mysql_connect</b> - открывает соединение с MySQL сервером </p>
	<pre>int mysql_connect(string [hostname] [:port] , string [username] , string [password] ); </pre>
	<p>Возвращает: Правильный идентификатор связи MySQL при успешном выполнении, или false при ошибке. 
<i>mysql_connect()</i> устанавливает соединение с MySQL сервером. Все аргументы необязательные, и если они пропущены, то устанавливаются по умолчанию -('localhost', имя пользователя, который владеет процессом, пустой пароль). Строка "имя сервера"("hostname") также может содержать номер порта( подобно "hostname:port"). </p>
	<p>В случае, если будет сделан второй вызов mysql_connect() с теми же аргументами, никакая новая связь не установится - вместо этого, будет возвращен идентификатор связи уже открытой связи. </p>

	<p><b>mysql_pconnect </b>- Открывает устойчивое соединение с MySQL-сервером </p>
	<pre>int mysql_pconnect(string [hostname] [:port] , string [username] , string [password] ); </pre>
	<p>Возвращает: Правильный MySQL идентификатор устойчивой связи при успешном выполнении , или false при ошибке. </p>
	<p>mysql_pconnect() действует очень похоже на mysql_connect() с двумя важными различиями. </p>
	<p>Во-первых, при соединении, функция должна сначала попытаться найти (устойчивую) связь, которая уже открыта тем же хостом, именем пользователя и паролем. Если она обнаруживается, возвратится ее идентификатор, вместо открытия нового соединения. </p>
	<p>Во-вторых, соединение с сервером SQL не закроется, когда закончится выполнение сценария. Вместо этого, связь останется открытой для последующего использования (<i>mysql_close()</i> не закроет связи установленные функцией <i>mysql_pconnect()</i>). </p>

	<p><b>mysql_close </b>- закрывает MySQL соединение </p>
	<pre>int mysql_close(int [link_identifier] ); </pre>
	<p>Возвращает: true при успешном завершении, false при ошибке 
<i>mysql_close()</i> закрывает связь с базой данных MySQL, ассоциированной с определенным идентификатором связи <i>link identifier</i>. Если идентификатор связи не определен, используется последняя открытая связь. </p>
	<p><i>mysql_close()</i> не закроет устойчивые связи сгенерированные функцией <i>mysql_pconnect()</i>. </p>

<h3>Работа с базой данных</h3>

	<p><b>mysql_create_db</b> - Создает базу данных MySQL </p>
	<pre>int mysql_create_db(string database name, int [link_identifier] ); </pre>
	<p><i>mysql_create_db()</i> пытается создавать новую базу данных на сервере связанном с определенным идентификатором связи. </p>

	<p><b>mysql_select_db </b>- Выбирает Базу Данных MySQL </p>
	<pre>int mysql_select_db(string database_name, int [link_identifier] ); </pre>
	<p>Возвращает: true при успешном выполнении , false при ошибке 
<i>mysql_select_db()</i> устанавливает текущую активную базу данных в сервере, которая связывается с определенным идентификатором связи. Если не определен идентификатор связи, принимается последняя открытая связь. Если связь не открыта, функция попытается установить связь, как если бы была вызвана функция <i>mysql_connect()</i>. Каждый последующий вызов mysql_query() будет произведен в активной базе данных. </p>

	<p><b>mysql_list_dbs </b>- Показывает список доступных Баз Данных на сервере </p>
	<pre>int mysql_list_dbs(int [link_identifier] ); </pre>
	<p><i>mysql_list_dbs()</i> возвратит указатель результата, содержащий базы данных доступные текущему процессу mysql. Используйте функцию <i>mysql_tablename()</i>, чтобы просмотреть этот указатель результата. </p>

	<p><b>mysql_list_tables </b>- Показывает список таблиц в базе данных MySQL </p>
	<pre>int mysql_list_tables(string database, int [link_identifier] ); </pre>
	<p><i>mysql_list_tables()</i> берет имя базы данных и указатель результата очень подобно функции <i>mysql_db_query()</i>. Функция <i>mysql_tablename()</i> должна использоваться, чтобы извлечь фактические имена таблиц с указателя результата.</p>

	<p><b>mysql_drop_db </b>- удаляет базу данных MySQL </p>
	<pre>int mysql_drop_db(string database_name, int [link_identifier] ); </pre>
	<p>Возвращает: true при успешном выполнении , false при неудачном завершении. 
<i>mysql_drop_db()</i> пытается удалить целую базу данных с сервера, связанного с определенным идентификатором связи. </p>


<h3>Фнкции, осуществляющие запросы к базе данных</h3>

	<p><b>mysql_db_query </b>- Посылает MySQL запрос </p>
	<b>int mysql_db_query(string database, string query, int [link_identifier] ); </b>
	<p>Возвращает: Правильный идентификатор результата MySQL в результате запроса, или false при ошибке. <i>mysql_db_query()</i> выбирает базу данных и выполняет запрос на нее. Если дополнительный идентификатор связи не определен, функция попытается найти открытую связь с MySQL сервером и если такая связь не обнаружена, то она попытается создать ее, как если бы функция <i>mysql_connect()</i> была вызвана без аргументов. </p>

	<p><b>mysql_query</b> - Отправляет SQL-запрос на MySQL </p>
	<pre>int mysql_query(string query, int [link_identifier] ); </pre>
	<p><i>mysql_query()</i> посылает запрос в базу данных, к настоящему времени активную на сервере, который связан с определенным идентификатором связи. Если link_identifier не указан, используется последняя открытая связь. Если связь не открыта, функция пытается установить связь, как если бы была вызвана функция <i>mysql_connect()</i> и использует ее. </p>
	<p>Эта функция возвращает TRUE или FALSE чтобы показать успешность выполнения запросов UPDATE, INSERT, и DELETE. При запросе SELECT она возвращает новый идентификатор результата. Ресурсы, использованные запросом затем могут быть освобождены вызовом функции <i>mysql_free_result()</i>. </p>

<h3>Функции для обработки результатов выполненного запроса</h3>

	<p><b>mysql_result </b>- Получает данные результата </p>
	<pre>int mysql_result(int result, int row, mixed field); </pre>
	<p><i>mysql_result()</i> возвращает содержимое одной ячейки из установленного результата MySQL. Аргументом поля может быть номер или имя поля, или параметр типа имя_таблицы-точка-имя_поля(fieldname.tablename). Если имя столбца заменено псевдонимом('select foo as bar from...'), используйте псевдоним вместо имени столбца. </p>
	<p>Работая с большими результатами, Вы должны предусматривать использование одной из функций, которые выбирают целую строку(указано ниже) За счет того, что эти функции возвращают содержимое большого числа ячеек за один вызов функции, они ЗНАЧИТЕЛЬНО более быстрые чем <i>mysql_result()</i>. Также, имейте в виду, что определение аргумента поля числовым параметром, значительно более быстрое чем определение имени поля(fieldname) или использование аргумента tablename.fieldname. </p>
	<p>Вызов mysql_result() не должен смешиваться с вызовами других функций, которые имеют дело с установленным результатом. </p>

	<p><b>mysql_affected_rows </b>- возвращает количество столбцов, использованных предыдущими MySQL операциями </p>
	<pre>int mysql_affected_rows(int [link_identifier] ); </pre>
	<p><i>mysql_affected_rows() </i>возвращает количество столбцов, использованных запросами INSERT, UPDATE или DELETE на сервере, связываемом с определенным идентификатором связи(<i>link_identifier</i>). Если идентификатор связи не определен, используется последняя открытая связь. </p>
	<p>Если последний запрос был запрос DELETE без условия WHERE, ВСЕ записи будут удалены из таблицы, но эта функция возвратит нуль. Эта команда не действует при запросе SELECT, она действует только при запросах, изменяющих записи. Чтобы получить количество колонок возвращенных на запрос SELECT, используйте <i>mysql_num_rows()</i>.</p>

	<p><b>mysql_data_seek </b>- Перемещает внутренний указатель результата </p>
	<pre>int mysql_data_seek(int result_identifier, int row_number); </pre>
	<p>Возвращает: true при успешном выполнении , false при ошибке. 
<i>mysql_data_seek()</i> перемещает внутренний указатель столбца в MySQL запросе, связанном с определенным идентификатором результата, чтобы указать на определенный номер столбца. Последующий вызов <i>mysql_fetch_row()</i> должно возвратить этот столбец.</p>

	<p><b>mysql_fetch_array </b>- Выбрать результат как ассоциативный массив </p>
	<pre>array mysql_fetch_array(int result); </pre>
	<p>Возвращает результат строки запроса как массив, или false при отсутствии результата. 
<i>mysql_fetch_array()</i> является расширенной версией функции <i>mysql_fetch_row()</i>. Кроме того, что она сохраняет данные в пронумерованных элементах, результатного массива, она также сохраняет ассоциативную связь, используя имена полей как ключи. </p>
	<p>Если два или более столбцов имеют одинаковые имена, то связку ключ/значение получает последний из них. Чтобы получить доступ к другому столбцу(-цам) с таким же именем, вы должны использовать индексы или задать псевдонимы(alias) для этих столбцов. </p>
	<pre>
	&lt;?php 
	mysql_connect($host,$user,$password);
	$result = mysql_db_query("database","select * from table");
	while($row = mysql_fetch_array($result)) {
	    echo $row["user_id"];
	    echo $row["fullname"];
	}
	mysql_free_result($result);
	?&gt;
	</pre> 

	<p><b>mysql_fetch_field </b>- Получает информацию о столбце из результата и возвращает ее как объект. </p>
	<pre>object mysql_fetch_field(int result, int [field_offset] ); </pre>
	<p>Возвращает объект, содержащий информацию о поле. 
<i>mysql_fetch_field()</i> может быть использована для получения информации о поле в определенном результате запроса. Если параметры поля не указаны, то будет запрошено поле, которое еще не было запрошено функцией <i>mysql_fetch_field()</i>. </p>
	<table><tr>
		<th colspan="2">Свойствами объекта являются:</th>
	</tr><tr>
		<td>name</td><td>имя столбца</td>
	</tr><tr>
		<td>table</td><td>имя таблицы, содержащей столбец</td>	
	</tr><tr>
		<td>max_length</td><td>максимальная длинна столбца</td>
	</tr><tr>
		<td>not_null</td><td>1, если столбец не может принимать нулевые значения</td>
	</tr><tr>
		<td>primary_key</td><td>1, если столбец является первичным ключом</td>
	</tr><tr>
		<td>unique_key</td><td>1 если столбец является уникальным ключом</td>
	</tr><tr>
		<td>multiple_key</td><td>1 если столбец является не-уникальным ключом</td>
	</tr><tr>
		<td>numeric</td><td>1 если столбец числовой</td>
	</tr><tr>
		<td>blob</td><td>1 это столбец является BLOB</td>
	</tr><tr>
		<td>type</td><td>тип столбца</td>
	</tr><tr>
		<td>unsigned</td><td>1 если столбец не назван</td>
	</tr><tr>
		<td>zerofill</td><td>1 если столбец заполнен нулем</td>
	</tr></table>

	<p><b>mysql_fetch_lengths </b>- Получает максимальный размер данных для каждого выходного значения </p>
	<pre>array mysql_fetch_lengths(int result); </pre>
	<p>Возвращает: Массив, который соответствует длинам каждого поля в последней строке, выбранной 	<i>mysql_fetch_row()</i>, или false при ошибке . </p>
	<p><i>mysql_fetch_lengths()</i> хранит длины каждого столбца в последней колонке результата возвращенного функцией <i>mysql_fetch_row()</i> в массиве, нумеруемом с нуля. </p>

	<p><b>mysql_fetch_object </b>- Получает строку результата как объект. </p>
	<pre>object mysql_fetch_object(int result); </pre>
	<p>Возвращает объект с свойствами, который соответствует полученной строке, или false если нет результата. </p>
	<p><i>mysql_fetch_object()</i> подобна <i>mysql_fetch_array()</i>, с одним различием - вместо массива возвращается объект. Это означает, что Вы можете иметь доступ к данным только по именам полей, а не по их параметрам (индексные числа в данном случае являются неверным обращением). </p>
	<pre>
	mysql_connect($host,$user,$password);
	$result = mysql_db_query("database","select * from table");
	while($row = mysql_fetch_object($result)) {
	    echo $row-&gt;user_id;
	    echo $row-&gt;fullname;
	}
	mysql_free_result($result);
	</pre>

	<p><b>mysql_fetch_row </b>- Получите строку результата как пронумерованный массив </p>
	<pre>array mysql_fetch_row(int result); </pre>
	<p>Возвращает: Массив, который соответствует выбранным колонкам, или false если нет результата. 
<i>mysql_fetch_row()</i> выбирает столбец данных из результата, и связывает его с определенным идентификатором результата(индексом элемента массива). Запрос возвращается как массив. Каждый столбец результата хранится в элементах массива, пронумерованного с нуля. </p>
<p>Последующий вызов функции <i>mysql_fetch_row()</i> должен возвратить следующую строку, или false если нет больше колонок. </p>

	<p><b>mysql_field_name </b>- Получает имя определенного поля в результате </p>
	<pre>string mysql_field_name(int result, int field_index); </pre>
	<p><i>mysql_field_name()</i> возвращает имя указанного поля. Аргументами функции являются идентификатор результата и индекс поля.</p> 

	<p><b>mysql_field_seek </b>- Устанавливает указатель запроса в определенное поле. </p>
	<pre>int mysql_field_seek(int result, int field_offset); </pre>
	<p>Поиск в определенном поле. Если следующий вызов <i>mysql_fetch_field()</i> не содержит указания поля, то должно быть возвращено именно это поле. </p>

	<p><b>mysql_field_table </b>- Получает имя таблицы, в которой находится указанное поле. </p>
	<pre>string mysql_field_table(int result, int field_offset); </pre>

	<p><b>mysql_field_type </b>- Получает тип указанного поля в результате </p>
	<pre>string mysql_field_type(int result, int field_offset); </pre>
	<p><i>mysql_field_type()</i> подобна функции <i>mysql_field_name()</i> . Аргументы идентичны, но возвращается тип поля. Это будет что-то из "int", "real", "string", "blob", или другие типы, которые подробно описываются в документации MySQL.</p>

	<p><b>mysql_field_flags </b>- Получает флаги, связанные с указанным полем в результате </p>
	<pre>string mysql_field_flags(int result, int field_offset); </pre>
	<p><i>mysql_field_flags()</i> возвращает флаги указанного поля. Флаги передаются как одно слово на флаг, разделенные одним пробелом, так, что Вы можете разделить возвращенную величину используя <i>explode()</i>. </p>
	<p>Если ваша текущая версия MySQL их поддерживает, могут быть получены следующие флаги :  "not_null", "primary_key", "unique_key", "multiple_key", "blob", "unsigned", "zerofill", "binary", "enum", "auto_increment", "timestamp". </p>

	<p><b>mysql_field_len </b>- Возвращает длину указанного поля </p>
	<pre>int mysql_field_len(int result, int field_offset); </pre>
	<p><i>mysql_field_len()</i> возвращает длину указанного поля. </p>

	<p><b>mysql_insert_id</b> - Получает id сгенерированный предыдущим выполнением SQL-запроса INSERT </p>
	<pre>int mysql_insert_id(int [link_identifier] ); </pre>
	<p><i>mysql_insert_id()</i> возвращает ID сгенерированнуые для поля с автоинкрементом (<i>AUTO_INCREMENTED</i>). Эта функция не использует аргументов. Она возвратит автоматически сгенерированный номер ID возвращенный последним запросом INSERT.</p>

	<p><b>mysql_list_fields </b>- Показывает список полей MySQL в результате запроса </p>
	<pre>int mysql_list_fields(string database_name, string table_name, int [link_identifier] ); </pre>
	<p><i>mysql_list_fields()</i> извлекает информацию о заданной таблице. Аргументы - имя базы данных и имя таблицы. После выполнения возвращается указатель результата, который может использоваться функциями <i>mysql_field_flags(), mysql_field_len(), mysql_field_name()</i>, и <i>mysql_field_type()</i>. </p>
	<p>Идентификатор результата является положительным целым. Функция возвращает -1 если происходит ошибка. </p>

	<p><b>mysql_free_result </b>- Освобождает память результата </p>
	<pre>int mysql_free_result(int result); </pre>
	<p><i>mysql_free_result()</i> должна быть использована только если Вы беспокоитесь об использовании слишком большого объема памяти, во время работы вашего скрипта. Вся используемая результатом память для определенного идентификатора результата автоматически будет освобождена. </p>

	<p><i>mysql_num_fields </i>- Получает количество полей в результате. </p>
	<p>int mysql_num_fields(int result); </p>
	<p><i>mysql_num_fields()</i> получает количество полей в установленном результате. </p>

	<p><b>mysql_num_rows </b>- Получает количество столбцов в результате </p>
	<pre>int mysql_num_rows(int result); </pre>
	<p><i>mysql_num_rows()</i> получает количество столбцов в установленном результате </p>

	<p><b>mysql_tablename</b> - Получает имя таблицы, содержащей указанное поле. </p>
	<pre>string mysql_tablename(int result, int i); </pre>
	<p><i>mysql_tablename()</i> берет указатель результата возвращенный функцией <i>mysql_list_tables()</i> а также целочисленный индекс и возвращает имя таблицы. Функция <i>mysql_num_rows()</i> может использоваться для того, чтобы определить количество таблиц на данном  
указателе результата</p>
<h3>И просто полезные функции</h3>

	<p><b>mysql_errno </b>- Возвращает номер сообщения об ошибке предыдущей операции MySQL </p>
	<pre>int mysql_errno(int [link_identifier] ); </pre>
	<p>Ошибки возвращающиеся с выходного буфера базы данных mySQL больше не делают предупреждение. Взамен, используйте эту функцию, чтобы получить номер ошибки. </p>

	<p><b>mysql_error </b>- Возвращает текст сообщения об ошибке предыдущей операции MySQL </p>
	<pre>string mysql_error(int [link_identifier] ); </pre>
	<p>Ошибки возвращающиеся с выходного буфера базы данных mySQL больше не делают предупреждение. Взамен, используйте эту функцию, чтобы получить строку описания ошибки. </p>



</Урок>