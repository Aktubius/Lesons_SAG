<?xml version="1.0" encoding="windows-1251" ?>

<!DOCTYPE page [
<!ENTITY nbsp "&#160;">
<!ENTITY пробел "&#160;">
<!ENTITY shy "&#173;">
<!ENTITY перенос "&#173;">
]>

<?xml:stylesheet type="text/xsl" href="../common/layout.xsl" ?>

<Урок xmlns="x-schema:Schema.xml" название="Расширенный комбинированный список"  предыдущий="section04.xml" следующий="section06.xml">


<h2><font color="#800000">Расширенный комбинированный список. <br/>Класс CComboBoxEx</font></h2>

<left><img src="cbe1.png" width="212" height="115"></img></left>

<p>
Вы уже познакомились с классом CComboBox, который инкапcулирует в себе стандартный элемент управления Windows - комбинированный список. Это довольно таки удобный элемент пользовательского интерфейса. Однако, как показывает практика, всегда не хватает возможностей, которые предоставляет стандартный комбинированный список. Рассмотрим новый для нас элемент управления  - расширенный комбинированный список, который относится к стандартным элементам управления Internet Explorer 4. Почему он не является стандартным элементом управления Windows? Выпуская Internet Explorer 4 (IE4), разработчики компании Microsoft включили в него улучшенную версию динамической библиотеки COMCTL32.DLL, которая отвечает за стандартные элементы управления Windows. Учитывая то обстоятельство, что данное обновление хотя и включало в себя улучшенные версии всех существующих элементов управления плюс еще несколько новых, но, тем не менее, не было частью операционной системы, то Microsoft назвала его IE4 Common Controls (стандартные элементы управления Internet Explorer 4). Наша с Вами задача, разобраться с классом MFC CComboBoxEx, который инскапсулирует в себе стандартный элемент управления IE4 - расширенный комбинированный список.
</p>

<center><img src="cbe3.png" width="89" height="140"></img></center>
<p><b><center><small><small>Пример расширенного комбинированного списка.</small></small></center></b></p>

<p>
Пожалуй, одной из главных особенностей расширенного комбинированного списка является возможность присоединить список изображений к элементам списка. Если раньше, для отрисовки изображений в обычном комбинированном списке необходимо было полностью отвечать за перерисовку этого элемента, то сейчас этот процесс является менее трудоемким. Попивая чай, Вы можете каждому элменту управления сопоставить три типа изображений: selected itmage (выделенное), unselected image (невыделенное) и перекрытое (overlay image).
</p>

<p>
Вы можете воспользоваться данным элементом управления, выбрав соответсвующую кнопку на палитре инструментов, так как показано на рисунке.
</p>

<center><img src="cbe2.png" width="299" height="112"></img></center>

<p>
Разбираясь как связать список изображений с расширенным комбинированным списком, мы с Вами рассмотрим еще два класса MFC: CImageList (список изображений) и CBitmap ("веселые картинки");
</p>

<p>
Еще одна приятная особенность состоит в том, что в сравнении с обычным комбинированным списком, который работает со строками, расширенный  работает с элементами структуры COMBOBOXEXITEM. По сути дела, если Вы захотите добавить новый элемент в расширенный комбинированный список, Вам необходимо будет заполнить поля экземпляра данной структуры и передать их списку.
</p>
<pre>
typedef struct {
       UINT    mask;
       int     iItem;
       LPTSTR  pszText;
       int     cchTextMax;
       int     iImage;
       int     iSelectedImage;
       int     iOverlay;
       int     iIndent;
       LPARAM  lParam;
} COMBOBOXEXITEM, *PCOMBOBOXEXITEM;
</pre>
<p>
Ниже в таблице приводиться анализ полей данной структуры.
</p>

<table   border='1' >
<caption><b>Описание полей структуры COMBOBOXEXITEM</b></caption>
<thead bgcolor='lightblue' >

 <tr>
    <td  align='center' width="25%"><b>Поле</b></td>
    <td  align='center' width="75%"><b>Описание</b></td>
 </tr>
</thead>

<tr>
<td>UINT <b>mask</b></td>
<td>набор битовых флажков, определяющих, какие операции выполняются при помощи этой структуры. Возможные варианты: CBEIF_IMAGE, CBEIF_INDENT, CBEIF_LPARAM, CBEIF_OVERLAY, CBEIF_SELECTEDIMAGE, CBEIF_TEXT <small><small>(полная справка в MSDN)</small></small></td>
</tr>

<tr>
<td>int <b>iItem</b></td>
<td>номер элемента. Как и у обычного комбинированного списка, нумерация начинается с нуля.</td>
</tr>

<tr>
<td>LPSTR <b>pszText</b></td>
<td>текст элемента</td>
</tr>

<tr>
<td>int <b>cchTextMax</b></td>
<td>длина буфера на который указывает pszText, естественно используется тогда, когда у элемента есть текст</td>
</tr>

<tr>
<td>int <b>iImage</b></td>
<td>порядковый номер изображения, в присоединенном списке изображений</td>
</tr>

<tr>
<td>int <b>iSelectedImage</b></td>
<td>порядковый номер изображения, в присоединенном списке изображений, который будет использоваться для предоставления "выбранного" состояния</td>
</tr>

<tr>
<td>int <b>iOverlay</b></td>
<td>порядковый номер изображения, в присоединенном списке изображений, который будет использоваться для перекрытия текущего изображения</td>
</tr>

<tr>
<td>int <b>iIndent</b></td>
<td>количество 10-пиксельных отступов </td>
</tr>

<tr>
<td>LPARAM <b>lParam</b></td>
<td>32-разрядный произвольный параметр, связанный с элементом</td>
</tr>
</table >

<p>
Какие же методы предоставляет нам класс CComboBoxEx для работы с расширенным комбинированым списком? Рассмотрим детальней этот вопрос.
</p>


<p>
Для создания расширенного комбинированного списка, Вам необходимо создать экзмепляр класса CComboBoxEx и вызвать метод Create который и создаст, непосредственно, расширенный комбинированный список и свяжет его с экземпляром класса CComboBoxEx. 
</p>


<p>
<b>CComboBoxEx </b> - конструктор, создает экземпляр класса CComboBoxEx.
</p>

<p>
<b>BOOL Create( DWORD dwStyle, const RECT&amp; rect, CWnd* pParentWnd, UINT nID );</b> -  метод позволяет создать расширенный комбинированный список и сопоставить его с экземпляром класса CComboBoxEx. Рассмотрим параметры даного метода: <b>dwStyle</b> - задает стиль расширеного комбинированого списка (CBS_SIMPLE, CBS_DROPDOWN, CBS_DROPDOWNLIST, WS_CHILD); <b>rect</b> - определяет положение и размер списка, через ссылку на экземпляр класса CRect; <b>pParentWnd</b> - указатель на родителя нашего списка, т.е. указатель на окно, которое будет содержать список (не может быть равен NULL); <b>nID</b> - задает идентификатор нашего списка, с помощью даного идентификатора мы сможем в дальнейшем обращаться к нашему списку. А что же возвращает функция? Функция возвращает НЕ ноль если она отработала нормально, иначе нуль. Пойдем дальше...
</p>

<p>
<b>int DeleteItem( int iIndex );</b> -  функция удаляет элемент с индексом iIndex (как всегда индексация с нуля) из списка. Возвращаемое значение функции равно количеству элементов реально отсавшихся в списке. Если пераметр iIndex задает несуществующий индекс, то функция возвращает значениие равное константе CB_ERR.
</p>

<p>
<b>BOOL GetItem( COMBOBOXEXITEM* pCBItem );</b> - с помощью даной функции возможно получить всю информацию об текущем элементе списка. Параметр pCBItem является указателем на экземпляр структуры COMBOBOXEXITEM, в который и будет записана информация о текущем элементе. Опять таки, если функция отработала нормально, то возвращаемое значение отличное от нуля.
</p>

<p>
<b>int InsertItem( const COMBOBOXEXITEM* pCBItem );</b> -  Вставляет новый элемент pCBItem в список. Если функция отработала нормально, то она возвращает индекс в списке добавленого элемента. Если все оказалось запущено, т.е. не удалось добавить элемент, то функция возвращает -1.
</p>

<p>
<b>BOOL SetItem( const COMBOBOXEXITEM* pCBItem );</b> -  устанавливает атрибуты для конкретного элемента списка. Если функция отработала нормально, возвращаемое значение отличное от нуля.
</p>

<p>
<b>BOOL HasEditChanged( );</b> -  функция отвечает на вопрос: "User-ок ты там чего-то изменил или мне показалось?". Если изменил - возвращаемое значение неравно нулю, иначе ноль.
</p>

<p>
<b>DWORD GetExtendedStyle( ) const;</b> -  возвращает дополнительные стили, которые использовались при задании стилей расширенного комбинированного списка.
</p>

<p>
<b>DWORD SetExtendedStyle( DWORD dwExMask, DWORD dwExStyles );</b> -  устанавливает дополнительыные стили для расширенного комбинированного списка.
</p>

<p>
<b>CEdit* GetEditCtrl( );</b> -  получает указатеь на текстовое поле, которое используется в расширенном комбинированном списке, указатель временный и не должен быть использован в дальнейшей работе.
</p>

<p>
<b>CComboBox* GetComboBoxCtrl( );</b> -  возвращает указатель на элемент управления ComboBox, который, по сути дела, представляет собою составную часть расширенного комбинированного списка. Таки снова, указатель временный и не должен быть использован в дальнейшей работе. Через данную функцию мы получаем доступ к методам комбинированного списка.
</p>

<p>
<b>CImageList* GetImageList( ) const;</b> -  возвращает указатель на присоединенный список изображений.
</p>

<p>
<b>CImageList* SetImageList( CImageList* pImageList );</b> -   устанавливает список изображений для  расширенного комбинированного списка.
</p>

</Урок>