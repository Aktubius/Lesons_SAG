<?xml version="1.0" encoding="windows-1251" ?>

<!DOCTYPE page [
<!ENTITY nbsp "&#160;">
<!ENTITY пробел "&#160;">
<!ENTITY shy "&#173;">
<!ENTITY перенос "&#173;">
]>

<?xml:stylesheet type="text/xsl" href="../common/layout.xsl" ?>

<Урок xmlns="x-schema:Schema.xml" название="Сессии" 
предыдущий="section01.xml" следующий="section03.xml">

<h1 style="COLOR: maroon">Сессии</h1>
<P>В этой главе речь пойдет о таком важном механизме, как сессии. Встроенная 
поддержка сессий появилась в PHP начиная с 4-ой версии (до этого сессии 
были реализованы в виде внешней библиотеки)</P>
<P><EM>Сессии</EM> - это механизм, который позволит вам создавать и использовать 
переменные, сохраняющие свое значение в течение всего времени работы 
пользователя с вашим сайтом. При этом у каждого пользователя вашего сайта эти 
переменные будут собственными, т.е. их область видимости (variable 
scope) распространяется на все время нахождения на сайте конкретного 
пользователя, причем для каждого захода пользователя на ваш сайт эти переменные 
будут различными. Говоря проще, эти переменные принадлежат конкретной сессии 
работы конкретного пользователя с вашим сайтом (отсюда и название механизма - 
сессии).</P>

<P>Как правило, при создании любого более-менее сложного сайта возникает 
необходимость в информации, которая сохранялась бы между запросами. В качестве 
самого распространенного примера можно привести систему регистрации на сайте, когда, 
после ввода логина/пароля необходимо "помнить" информацию о том, что 
пользователь зарегистрировался на сайте и является именно этим пользователем, а 
не каким-то другим.</P>
<P>В основе всего механизма сессий лежит решение задачи об идентификации того, 
от кого именно пришел запрос на сервер. Если это будет точно известно, то уже не 
возникнет большой проблемы в том, чтобы предоставить скрипту информацию, 
относящуюся именно к этому конкретному пользователю. Данная задача решается 
путем присвоения каждой сессии уникального идентификатора SESSIONID, который 
создается в тот момент, когда 
пользователь заходит на сайт, и уничтожается в момент, когда пользователь уходит 
с сайта. Этот идентификатор передается на сервер вместе с каждым запросом со 
стороны клиента и возвращается на машину клиента вместе с результатами обработки 
запроса. Алгоритм генерации SESSIONID (а в PHP в качестве идентификатора сессии 
используется т.н. GUID (Global Unique IDentifier)) 
позволяет гарантировать его уникальность, поэтому исключена возможность того, 
что две сессии будут иметь один и тот же идентификатор сессии.</P>
<P>PHP может использовать два различных механизма 
в качестве "транспортного средства" для передачи SESSIONID:</P>
<UL>
<LI>Cookies </LI>
  
<LI>Параметр query string </LI></UL>
<P>Cookies - это, конечно, более удобный способ передачи 
идентификатора. При этом SESSIONID сохраняется "внутри" браузера и остается незаметным 
для пользователя. Но поддержка cookies - это необязательное условие для 
браузера, она может отсутствовать или быть отключена у кого-то из посетителей, 
поэтому в общем случае полагаться на них нельзя. В этом случае можно 
использовать менее "красивый", но более надежный способ - передачу SESSIONID через 
параметр query string. PHP имеет возможность автоматически добавлять SESSIONID 
ко всем линкам в генерируемых HTML страницах, поэтому вам, как правило, не нужно 
будет заботиться о том, чтобы добавлять этот идентификатор к каждому линку 
вручную. Если же вы по каким-либо причинам хотите сами передавать идентификатор 
сессии - вы всегда можете получить его из константы SESSIONID или из 
функции <EM>session_id()</EM>.</P>
<P>Для того, чтобы иметь возможность использовать сессионные переменные в своей 
программе, необходимо сначала создать сессию. Для этого необходимо добавить 
следующую строчку в ваш код:</P>
<PRE>session_start();</PRE>
<P>Вам необходимо вызывать эту функцию на каждой 
странице, на которой вам необходимо использовать сессионные переменные. Кроме 
того, если вы будете часто использовать сессионные переменные в своих программах, вы 
можете просто изменить настройки PHP таким образом, чтобы сессии 
инициализировались автоматически. Для этого исправьте следующую строчку в 
php.ini:</P>
<PRE>session.auto_start = 1</PRE>
<P>После того, как сессия инициализирована (неважно, вручную или автоматически), 
вы можете зарегистрировать необходимые вам сессионные переменные. Регистрация 
сессионных переменных производится путем добавления следующей строчки в ваш 
код:</P>
<PRE>session_register('имя_перем1','имя_перем1',...);</PRE>
<P>В качестве параметров функции передаются имена сессионных переменных, 
которые необходимо создать. Обратите внимание на то, что передаются именно 
имена, а не сами переменные, как можно подумать. Необходимо помнить об этом, 
дабы избежать ошибок.</P>
<P>После того, как сессионная переменная зарегистрирована - она может быть 
использована на любой странице сайта в пределах одной и той же пользовательской 
сессии. Повтораная регистрация переменной необязательна (т.е. зарегистрировав 
переменную на одной странице совершенно необязательно регистрировать ее же на 
всех страницах, где необходимо ее использование). Но если вы будете 
регистрировать переменные на каждой странице - тоже ничего страшного не 
произойдет. </P>
<P>Способ обращения к сессионным переменным зависит от настроек в файле 
php.ini. Если register_globals включен, то обращение к 
сессионной переменной по синтаксису ничем не будет отличаться от обращения к 
обычной переменной:</P>
<PRE>session_register('myVar');
$myVar = 5;
</PRE>
<P>Если же он выключен - то обращаться к сессионным переменным необходимо через 
глобальный массив $HTTP_SESSION_VARS:</P>
<PRE>session_register('myVar');
$HTTP_SESSION_VARS['myVar'] = 5;
</PRE>
<P>Кроме того в php.ini есть еще множество других настроек, касающихся сессий, но 
вам, в большинстве случаев, придется использовать лишь несколько:</P>
<P>session.save_path</P>
<P>Здесь вам необходимо указать путь к каталогу, где будут храниться временные 
файлы сессий. Помните, что при высокой посещаемости сайта в этом каталоге 
появится очень много мелких файлов!</P>
<P>session.use_cookies</P>
<P>Определяет, необходимо ли использовать cookies для хранения SESSIONID. Если 
значение этого параметра установлено в "да" (1, On, Yes, True), то будут 
использоваться cookies, если в "нет" (0, Off, No, False) - то SESSIONID будет 
передаваться через параметр query string.</P>
<P>session.auto_start</P>
<P>Если занчение этого параметра установлено в "да", то сессия будет каждый раз 
создаваться автоматически, в противном случае вам необходимо будет каждый каз 
инициализировать ее вручную, вызывая функцию session_init()</P>
<P>session.cookie_lifetime</P>
<P>Время (в секундах), в течении которого будет сохраняться в браузере cookie, 
содержащая SESSIONID. Если значение этого параметра установлено в 0, то сессия будет 
сохраняться до тех пор, пока пользователь не закрот окно браузера. Если же 
значение задано, то по истечение заданного промежутка cookie будет удалена и 
сессия будет считаться закрытой.</P>
<P>Необходимо помнить, что не каждая переменная может быть напрямую помещена в 
сессионную переменную. Например в сессионные переменные нельзя сохранять 
переменные-ресурсы (такие например, как переменные подключений к базам данных и 
т.п.).</P>
<P>Для того, чтобы проиллюстрировать использование сессионных переменных - 
небольшой пример:</P>
<P>example1.php</P>
<PRE>&lt;?php
session_start();
session_register("test");

$test = "Ура! Сессионная переменная работает";
?&gt;
&lt;a href="example2.php"&gt;click here&lt;/a&gt;
</PRE>
<P>example2.php</P>
<PRE>&lt;?php
session_start();
echo $test;
?&gt;
</PRE>
<p>session_destroy() </p>
<p>Уничтожить: 
все данные, хранящиеся в сессии; 
файл, отведенный для данных ;
переменные в программе и идентификатор посетителя .
Функция отменяет действие session_start(). Вызывать нужно после вызова session_start(). 
Можно применять, чтобы уничтожать сессиию пользователя, а потом сразу вызывать в программе 
второй раз session_start(), получиться совершенно новый посетитель с новым идентификатором и 
чистой сессией. </p>
<p>session_save_path()</p>
<p>Получить или установить каталог, в котором будут храниться файлы сессии.</p> 
<pre>$path=session_save_path() //получить 
session_save_path("/mydir/temp"); //установить
</pre>
<p>session_id()</p>
<p>Получить или установить идентификатор посетителя (128-битное число, представленное в виде строки
 в 32 байта).</p>
<p>session_unregister()</p>
<p>Выполнить обратно действие - удалить из сессии необходимую переменную. Можно передать только одно имя переменной за один вызов функции. </p>
<p>session_unset()</p>
<p>Очистить все переменные сессии. В отличии от session_destroy() сессия и идентификатор остается. </p>


</Урок>