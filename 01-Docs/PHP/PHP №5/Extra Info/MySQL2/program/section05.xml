<?xml version="1.0" encoding="windows-1251" ?>

<!DOCTYPE page [
<!ENTITY nbsp "&#160;">
<!ENTITY пробел "&#160;">
<!ENTITY shy "&#173;">
<!ENTITY перенос "&#173;">
]>

<?xml:stylesheet type="text/xsl" href="../common/layout.xsl" ?>

<Урок xmlns="x-schema:Schema.xml" название="MySQL"  предыдущий="section04.xml" следующий="section06.xml">

<h2>Методы резервирования.</h2>
<H3>1. Программа  mysqldump</H3>
<P>При резервировании базы данных с помощью программы mysqldump формруется файл, 
который состоит из создающих таблицы операторов CREATE TABLE и операторов INSERT 
с данными строк таблиц. Другими словами, в процессе работы программа mysqldump 
создает набор операторов, которые впоследствии можно отправить серверу myaql для 
воссоздания базы данных. Для резервирования целой базы данных в одном текстовом 
файле достаточно запустить следующую команду: 
<pre>c:\mysql\bin&gt; mysqldump -u username -p dbase_name &gt;/usr/archives/mysql/samp_db.2002-10-02 </pre>
Далее ввести пароль пользователя username и в результате выполнения команды будет создан 
файл, начинающийся следующим образом:
<pre> # MySQL dump 8.14
 #
 # Host: localhost Database: dbase_name 
 # 
 # Server version 3.23.40-nt 
 # 
 # Table structure for table 'absence' 
 # CREATE TABLE absence( student_id int(10) unsigned DEFAULT '0' 
   NOT NULL, date date DEFAULT '0000-00-00' NOT.NULL, PRIMARY KEY (student id,date) 
 # Dumping data for table 'absence' 
 # INSERT INTO absence VALUES (3,4999-09-03') 
   INSERT INTO absence VALUES (5,4999-09-03') 
   INSERT INTO absence VALUES (10,4999-09-06'
   ...</pre></P>
<P>           
  Остальная часть файла также состоит из операторов CREATE TABLE и INSERT.</P>
<P>
Результатом резервирования большой базы данных станет создание большого файла архива,
 с которым трудно работать. В 
таком случае можно зарезервировать отдельные таблицы, указав их имена после 
имени базы данных в строке команды mysqldump. Это приведет к созданию меньших, а 
следовательно, и более удобных для обработки файлов. Резервирование отдельных 
таблиц базы данных samp_db можно выполнить с помощью следующих команд:
<pre> c:\mysql\bin&gt; mysqldump -u username -p samp_db student score event absence &gt; gradebook.sql c:\mysql\bin&gt; mysqldump -u 
 username -p samp_db member president &gt; hist-league.sql </pre></P>
<p>Если создаваемые файлы архивов планируется использовать 
для периодического обновления содержимого другой базы данных, можно добавить в 
командную строку mysqldump опцию --add-drop-table. В этом случае в файл архива 
будут заноситься операторы DROP TABLE IF EXISTS. При загрузке файла архива с 
этими операторами в другой базе данных сообщения о существовании таблиц 
появляться не будут. Администраторы, управляющие двумя серверами, могут 
использовать этот способ для периодической загрузки данных из баз данных одного 
сервера в базы другого. </p>
<P>         
  Для переноса содержимого базы данных на другой сервер вовсе необязательно 
создавать файлы архива. Достаточно убедиться в существовании этой базы данных на 
другом компьютере, а затем создать канал (pipe), чтобы mysql смог напрямую 
считывать вывод команды mysqldump. Так, например, копирование базы данных с 
компьютера pit-viper.snake.net на boa.snake.net легко выполняется с помощью следующих 
команд:
<pre> c:\mysql\bin&gt; mysqladmin -h boa.snake.net create samp db 
 c:\mysql\bin&gt; mysqldump samp_db | mysql -h boa.snake.net samp_db</pre></P>
<P>Чтобы впоследствии обновить информацию базы данных на компьютере 
boa.snake.net, запустите только вторую команду, добавив опцию --add-drop-table во 
избежание ошибок записи в уже существующие таблицы: 
<pre> mysqldump --add-drop-table samp_db | mysql -h boa.snake.net samp db </pre></P>
<P>В&nbsp; командной строке можно использовать и другие полезные опции, например:</P>
<UL>
  <LI>Комбинация опций ---flush-logs и --lock-tables 
  полезна для контроля состояния базы данных. Первая опция закрывает и повторно 
  открывает файлы журналов обновлений, а вторая - блокирует все резервируемые 
  таблицы. Если сервер создает журналы обновлений с порядковыми именами, каждый 
  новый журнал будет содержать все запросы на изменение базы данных с момента ее 
  последнего резервирования. (Блокировка таблиц закрывает доступ к базе данных 
  пользователям, пытающимся внести изменения.) Если опция --flush-logs 
  применяется для согласования времени создания журнала обновлений и времени 
  резервирования, лучше архивировать сразу всю базу данных. При резервировании 
  отдельных таблиц довольно трудно синхронизировать журналы обновлений с файлами 
  архивов. В процессе восстановления содержимое журнала обновлений обычно 
  извлекается для каждой базы данных отдельно. Невозможно рассортировать эту 
  информацию еще и по таблицам, поэтому администратору это придется делать 
  самостоятельно. </LI>
  <LI>Команда mysqldump по умолчанию перед записью таблицы в архив считывает ее 
  всю в память. В этом, однако, нет необходимости. Более того, подобная 
  обработка больших таблиц вообще может привести к сбою. Поэтому администратор 
  может воспользоваться опцией --quick, определяющей построчное считывание и 
  запись информации. Чтобы еще больше оптимизировать процесс резервирования, 
  вместо опции --quick можно применить опцию --opt. Она, в свою очередь, 
  активизирует все остальные опции, ускоряющие считывание и резервирование 
  данных. <p>   
       Выполнение резервирования 
  с помощью опции --opt&nbsp;- наиболее распространенный (благодаря скорости) метод 
  выполнения. Однако следует проявлять осторожность, поскольку опция --opt оптимизирует процедуру 
  резервирования, закрывая на время доступ к базе данных. Она 
  блокирует все таблицы сразу, запрещая внесение каких-либо изменений. Эффект от 
  применения этой опции заметить очень легко. Попробуйте запустить команду резервирования 
  с этой опцией днем, во время наиболее частого использования базы данных. 
  Пользователи не заставят себя долго ждать.</p></LI>
  <LI>Эффекта, прямо противоположного результатам опции --opt, можно достичь с 
  помощью опции --delayed. Эта опция заставляет команду mysqldump записывать в 
  файл архива операторы INSERT DELAYED вместо операторов INSERT. Опция --delayed 
  оказывается весьма полезной, если при загрузке файла архива в другую базу 
  данных администратор желает уменьшить влияние этой операции на выполнение 
  текущих запросов.</LI>
  <LI>Для уменьшения передаваемого объема информации при копировании базы данных 
  с одного компьютера на другой весьма эффективной является опция —compress. 
  Однако эта опция предназначается для программ, взаимодействующих с сервером 
  удаленного, а не локального компьютера: 
  <pre>c:\mysql\bin&gt; mysqldump --opt samp_db | mysql --compress -h boa.snalce.net samp_db </pre>Прочие 
  &nbsp;опции&nbsp;можно
  увидеть, набрав в командной строке mysqldump -h.  </LI></UL>

<H3>2. MySQL-Front </H3>
<p>Вы, безусловно, помните прошлый урок и установку MySQL-Front.&nbsp;И помните о возможности резервного 
копирования таблиц. На всякий случай напоминаю.<tt> Для сохранения скрипта 
выберите Im-/Export -&gt; Export Tables... или одноименную кнопку на панели инструментов. 
Дальше отмечаем какие таблицы и в какой файл сохранять. Export!</tt> Пробовали? Нет? Зря! Созданный файл поразительно напоминает тот, который создал 
mysqldump. Еще один аргумент&nbsp; в&nbsp;пользу Front'а. 
И никакой консоли... </p>
<H3>3. Использование методов прямого копирования</H3>
<P>         
  Второй метод резервирования баз 
данных и таблиц заключается в непосредственном копировании файлов таблиц.&nbsp;Ранее уже отмечалось, 
что при использовании методов прямого копирования обязательно нужно убедиться, что 
таблицы в процессе резервирования не используются другими пользователями. 
Если сервер изменяет какую-либо таблицу во время копирования, ее 
копия окажется искаженной. Лучший способ обеспечить целостность копий — временно приостановить 
работу сервера, скопировать файлы и затем снова запустить сервер. 
Если ситуация не позволяет полностью остановить сервер,&nbsp;&nbsp;можно заблокировать 
таблицы, подлежащие резервированию.&nbsp;Итак, предположим, что работа сервера временно приостановлена либо 
подлежащие копированию таблицы защищены от изменения. В таком случае резервирование всей базы 
данных выполняется посредством&nbsp;стандартных команд копирования файлов.&nbsp;
 По завершению процедуры резервирования можно перезапустить сервер (если его работа была 
приостановлена) или снять блокировку с таблиц (если сервер все 
же работал). Для переноса зарезервированных методом прямого копирования файлов на другой 
компьютер достаточно еще раз скопировать их в соответствующий каталог базы 
данных другого компьютера. Однако прежде необходимо убедиться, что файлы соответствуют MyISAM-таблицам 
и оба&nbsp;компьютера имеют одинаковую аппаратную архитектуру. Иначе содержимое таблицы 
на втором компьютере может выглядеть очень странно. Следует также проверить, что 
в процессе копирования файлов на другой компьютер пользователи сервера не 
пытались получить к ним доступ. 
</P>

<H3>4. Репликация баз данных </H3>
<P>Термин "репликация" знаком Вам из курса администрирования и может означать как простое копирование базы данных на 
другой компьютер, так и интерактивное обновление подобной второй базы данных при 
внесении изменений в основную базу данных. Если необходимо просто скопировать 
базу данных на другой компьютер, можно воспользоваться одним из описанных выше 
методов. Первые признаки возможностей интерактивного обновления появились только 
в версии MySQL 3.23. Пока они находятся на стадии разработки, поэтому 
заинтересованным администраторам следует внимательно следить за будущими 
версиями, чтобы не пропустить новые разработки.</P>
</Урок>


