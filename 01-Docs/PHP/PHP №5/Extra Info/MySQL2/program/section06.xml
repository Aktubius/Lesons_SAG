<?xml version="1.0" encoding="windows-1251" ?>

<!DOCTYPE page [
<!ENTITY nbsp "&#160;">
<!ENTITY пробел "&#160;">
<!ENTITY shy "&#173;">
<!ENTITY перенос "&#173;">
]>

<?xml:stylesheet type="text/xsl" href="../common/layout.xsl" ?>

<Урок xmlns="x-schema:Schema.xml" название="MySQL"  предыдущий="section05.xml" следующий="index.xml">
<H2>Восстановление таблиц</H2>
<p>Повреждение данных может происходить по самым разным причинам и значительно 
варьироваться по масштабам. В наилучшем случае поврежденными оказываются одна-две 
таблицы (например, если работа компьютера была внезапно завершена из-за отключения 
электричества). В наихудшем — придется восстанавливать весь каталог данных 
(например, если вышел из строя и не подлежит ремонту жесткий диск). 
Восстановление данных может потребоваться и в некоторых других ситуациях, 
например, когда пользователи случайно удалят базы данных или таблицы, либо 
сотрут их содержимое (Вы до сих пор не настроили разрешения? Мои соболезнования!). 
Независимо от причин повреждения, администратору немедленно нужно выполнить процедуру 
восстановления. Если таблицы не утеряны, а лишь повреждены, попытайтесь отладить 
их с помощью команд myisamchk и issamchk. Вполне вероятно, что проблему можно 
решить с их помощью, и необходимость в восстановлении файлов из архивов отпадет.  
Если же таблицы потеряны или не подлежат отладке, самое время приступить к их 
восстановлению. Для восстановления используются два источника информации: файлы 
архива и журналы обновлений. Первые позволяют восстановить таблицы до состояния, 
в котором они были в момент выполнения резервирования. Однако зачастую таблицы 
значительно изменяются пользователями между моментами резервирования и сбоя. 
В такой ситуации эффективными оказываются журналы обновлений, содержащие все 
последние запросы на внесение изменений. Чтобы восстановить все эти изменения, достаточно 
запустить запросы журнала обновлений в mysql. 
(Именно по этой причине администратор должен обязательно включить регистрацию 
обновлений. Если она не активизирована, немедленно включите и не поленитесь сделать 
резервную копию базы данных.)
</p>

<P>        
 &nbsp;Восстановление таблиц — весьма неприятный процесс, определяемый, 
в первую очередь, характером повреждений данных. Однако несмотря 
на это, существуют определенные требования и процедуры, которым должен 
следовать администратор. Их выполнение позволит значительно повысить вероятность успешного исправления таблиц. 
Зачастую лучше, начать с быстрого метода восстановления таблиц и оценить, 
в состоянии ли он самостоятельно устранить повреждения. Если этого метода 
недостаточно, можно постепенно переходить к более сложным методам восстановления, пока результаты 
повреждения не будут устранены или даже самый сложный метод не сможет с 
ними "справиться". (В большинстве случаев устранить неполадки можно и 
без переходов на более сложные, а соответственно и более медленные 
модели.) Если же таблицу исправить невозможно, остается лишь восстановить ее из 
архивной копии.&nbsp;</P>
<H3>Блокировка таблицы для выполнения восстановления</H3>
<P>Процедура блокировки, выполняемая перед восстановлением таблицы, подобна 
процедуре блокировки для проверки и имеет только два основных отличия. Во-первых, необходимо заблокировать 
доступ не только&nbsp;с правами записи, но и с правами чтения. Поскольку утилиты в 
процессе своей работы будут изменять таблицу, необходимо всем клиентам запретить какой бы 
то ни было доступ к ним. Во-вторых, по завершении восстановления необходимо 
запустить оператор FLUSH TABLES , поскольку&nbsp;утилиты myisamchk или isamchk 
создают новый файл индексов, а сервер не заметит его 
до тех пор, пока не загрузит заново кэш таблицы. Для реализации 
всей этой процедуры запустите mysql в окне 1 и выполните&nbsp;следующие 
операторы: 
<pre>c:\mysql\bin&gt;&nbsp;mysql db_name&nbsp; 
mysql&gt; LOCK TABLE tbl__name WRITE;
mysql&gt; FLUSH TABLES;</pre> He завершая работы mysql, перейдите в окно 2 и 
скопируйте файлы таблиц, если это не было сделано ранее. После этого запустите 
процесс&nbsp;восстановления:

<pre>c:\mysql\data\some_dir&gt; сoрy tbl_name.* /some/other/directory </pre> 
 <IMG alt="Консоль копирования" src ="copy.png" />
</P>
 
<H3>Стандартное восстановление таблиц </H3>
<P>Для исправления ошибок таблицы выполните следующие действия.&nbsp;</P> 
<OL>
  <LI>&nbsp;Попытайтесь исправить таблицу с помощью опции --recover, однако 
  воспользуйтесь сначала опцией --quick, чтобы выполнить восстановление, 
  основываясь на содержимом файла индекса. В этом случае таблица будет 
  исправлена без внесения изменений в файл данных: 
  <PRE> c:\mysql\bin&gt; myisamchk --recover --quick tbl_name 
 c:\mysql\bin&gt; isamchk --recover --quick tbl_name</PRE> </LI>
  <LI> &nbsp;Если проблема осталась нерешенной, попробуйте еще раз запустить 
  приведенные выше команды, однако без опции —quick. Это позволит утилитам 
  восстановления в процессе работы изменять также и файл данных: 
  <pre>c:\mysql\bin&gt;myisamchk --recover tbl_name </pre>
 <IMG alt="Консоль восстановления" src ="rec.png" /> </LI>
<LI>&nbsp;Если и это не помогло, попробуйте воспользоваться режимом 
  восстановления --safe-recover. Он займет больше времени, чем обычный режим, 
  однако в состоянии устранить некоторые проблемы, не решаемые в обычном режиме 
  --recover: <PRE>c:\mysql\bin&gt; myisamchk --safe-recover tbl name 
  c:\mysql\bin&gt; isamchk --safe-recover tbl name</PRE>Если 
  работа утилиты myisamchk или isamchk на любом из этих этапов прерывается 
  сообщением об ошибке типа "Can't create new temp file: file_name" ("Невозможно 
  создать новый временный файл: имя файла"), запустите команду еще раз, добавив 
  опцию —force для автоматического удаления временного файла. Это позволит более 
  успешно выполнить операцию восстановления. </LI></OL>
<P><EM>Настоятельно рекомендуем перед восстановлением таблиц 
скопировать их файлы на случай негативного развития событий. Последнее 
маловероятно, однако все же возможно, и в этом случае останется шанс 
получить&nbsp;новые копии и попробовать другие методы восстановления.</EM>       
</P>
<p>
По завершении работы утилит myisamchk или isamchk вернитесь к сеансу mysql, 
обновите кэш таблицы и снимите блокировку таблиц: 
<PRE>mysql&gt; FLUSH TABLES; 
mysql&gt; UNLOCK TABLE;</PRE>
</p>
<H3>Что делать, если стандартные методы восстановления таблиц не приводят к 
успеху?</H3>
<P>&nbsp;Если применение стандартных методов восстановления не позволяет 
восстановить таблицу, значит, файл индекса отсутствует либо сильно поврежден и не 
подлежит восстановлению. Кроме того, вполне возможно, хотя и маловероятно, что 
отсутствует и файл описания таблицы. В любом из этих случаев необходимо заменить 
поврежденные файлы, а затем снова выполнить стандартную процедуру 
восстановления. Для воссоздания файла индекса выполните следующие действия.</P>
<OL>
  <LI> Перейдите в каталог базы данных, содержащий файлы поврежденной таблицы.</LI> 
  <LI>Перенесите файл данных таблицы в безопасное место.&nbsp; </LI>
  <LI>&nbsp;Запустите mysql и воссоздайте новую пустую таблицу с помощью 
  следующего оператора : 
  <PRE>    &nbsp;mysql&gt; DELETE FROM tbl_name;&nbsp;</PRE>
  (файл описания таблицы tbl_name.frm будет использован 
  для создания нового файла данных и индекса)</LI>
  <LI>Завершите работу с mysql и перенесите исходный файл данных обратно в 
  каталог базы данных, заменив только что созданный пустой файл данных. </LI>
  <LI>Повторно запустите стандартную операцию восстановления таблицы. </LI>
  </OL>
  <p>Чтобы воссоздать файл описания 
  таблицы, восстановите его из архива и еще раз запустите стандартную процедуру восстановления. 
  Если архив по каким-либо причинам не сохранился, но администратор знает, какой оператор CREATE TABLE 
  необходимо запустить для создания таблиц, возможность исправления ошибок все еще 
  остается.&nbsp; 
  </p>
<OL>
  <LI>&nbsp;Переместитесь в каталог базы данных, содержащий 
  поврежденную таблицу.&nbsp; </LI>
  <LI>&nbsp;Перенесите файл данных таблицы в безопасное 
  место. Можно перенести также и файл индексов, если необходимо использовать и 
  его.&nbsp; </LI>
  <LI>&nbsp;Запустите mysql и выполните оператор CREATE TABLE для создания таблицы. </LI>
  <LI>Завершите работу mysql и перенесите исходный файл 
  данных обратно в каталог базы данных, заменив им только что созданный файл. 
  Если при выполнении п. 2 был перемещен и файл индексов, верните и его.&nbsp; </LI>
  <LI>&nbsp;Снова запустите процедуру стандартного восстановления. </LI></OL>
<p>Если и после этого восстановить базу данных не удалось, остается попробовать</p>

<H3>Восстановление данных из архивов</H3>
<H3>Восстановление базы данных</H3>
<P>Сначала, если речь идет о восстановлении базы данных mysql <STRONG>с 
таблицами разрешений</STRONG>, необходимо запустить сервер с опцией 
—skip-grant-tables. Иначе сервер выдаст сообщение о невозможности поиска таблиц 
разрешений. После восстановления таблиц разрешений выполните команду mysqladmin 
flush-privileges, чтобы заставить сервер загрузить и использовать таблицы 
разрешений. Затем:</P>
<UL>
  <LI>Скопируйте содержимое каталога базы данных в другое 
  место. Оно может потребоваться в будущем для изучения оставшихся данных 
  поврежденных таблиц.&nbsp; </LI>
  <LI>&nbsp;Загрузите базу данных, используя файлы самых 
  последних архивов. Если эти файлы были созданы программой mysqldump, 
  используйте их в качестве ввода в mysql. Если же восстановление информации 
  выполняется из файлов, непосредственно скопированных из каталога базы данных, 
  скопируйте их обратно в каталог данных. В последнем случае перед копированием 
  файлов необходимо временно приостановить работу сервера, а по завершении 
  переноса — снова запустить. </LI>
  <LI>Используя журналы обновлений, повторно запустите все запросы на изменение 
  базы данных, которые были исполнены с момента последнего резервирования. Для 
  этого содержимое журнала обновлений можно представить в качестве ввода для 
  mysql. Если необходимо, определите опцию --one-database, чтобы сервер mysql 
  исполнил запросы только к той базе данных, которая представляет интерес. 
    Например, если запросы к базе данных, выполненные после 
  последнего резервирования, хранятся в файлах с именами update.392, update.393 и т.д., 
  повторно запустить их можно с помощью следующих команд:
  <pre>
   mysql --one-database db_name &lt; update.392
   mysql --one-database db_name &lt; update.393 </pre>
   Если процедура восстановления применяется для устранения 
  результатов случайного выполнения операторов DROP DATABASE, DROP TABLE или 
  DELETE, не забудьте перед запуском команды удалить эти операторы из журнала! 
  </LI></UL>
<H3>Восстановление отдельных таблиц </H3>
<P>       
 Восстанавливать отдельные таблицы сложней. Если 
для восстановления применяется файл архива, созданный утилитой mysqldump и 
содержащий данные для множества таблиц, администратору придется извлечь 
из него строки, соответствующие требуемой таблице, и использовать их 
в качестве ввода для mysql. Это самая легкая часть процедуры восстановления. После 
нее необходимо из журнала обновлений извлечь записи, соответствующие требуемой таблице. Для 
выполнения этой процедуры весьма полезной может оказаться утилита mysql_find_rows, возможности 
которой позволяют извлекать многострочные запросы из журнала обновлений. </P>
<P>Еще один вариант — восстановить всю базу данных на другом сервере, а затем 
скопировать нужную таблицу в исходную базу данных. Эта процедура гораздо проще! 
Необходимо лишь убедиться, что работа сервера с исходной базой данных 
приостановлена в процессе копирования файлов в исходную базу. </P>

</Урок>


